name: Build and test Postgres Standard Library

# on:
#   push:
#     branches:
#       - 1.67.1
#   pull_request:
#     branches:
#       - 1.67.1
on:
  push:
    branches:
      - on-demand-aarch64-runners
      - 1.67.1
  pull_request:
    branches:
      - on-demand-aarch64-runners
      - 1.67.1

jobs:
  # test_x86_84:
  #   name: "x86_64 (cross: aarch64) build & test"
  #   runs-on: ubuntu-latest

  #   steps:
  #   - uses: actions/checkout@v3
  #     with:
  #       submodules: 'recursive'

  #   - name: Install system dependencies
  #     run: |
  #       sudo apt-get -y update && sudo apt-get install -y \
  #         clang-11 \
  #         llvm-11 \
  #         clang \
  #         gcc \
  #         make \
  #         build-essential \
  #         libz-dev \
  #         zlib1g-dev \
  #         strace \
  #         libssl-dev \
  #         pkg-config \
  #         crossbuild-essential-arm64

  #   - name: Install rust
  #     run: |
  #       export RUSTUP_HOME="$HOME/.rustup"
  #       curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
  #       source "$HOME/.cargo/env"
  #       cargo --version

  #   - name: Build postgrestd for both x86_64 and aarch64
  #     run: ./run install
  #     env:
  #       CARGO_TARGET_AARCH64_POSTGRES_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
  #       CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
  #       CARGO_TARGET_X86_64_POSTGRES_LINUX_GNU_LINKER: cc

  # # Because (at the time of this writing) Github Actions does not have support for aarch64, we need to spin up
  # # aarch64 instances in AWS in order to run whatever is required.
  # spin_up_aarch64_instances:
  #   name: Spin up aarch64 runner instances

  #   # The following permissions are required to instruct GHA that it is allowed
  #   # to communicate to another service via OIDC
  #   permissions:
  #     id-token: write # Required for requesting OIDC JWTs
  #     contents: read  # This is required for actions/checkout

  #   runs-on: ubuntu-latest

  #   # In order to run this against aarch64 instances in AWS, GHA needs to authenticate
  #   # against AWS via OIDC so it can directly communicate and launch AWS instances as
  #   # needed. All the infrastructure and machinery is set up outside of Github Actions.
  #   # Using OIDC is an alternative to setting up hard-coded AWS CLI credentials somewhere
  #   # on a Github Action runner.
  #   steps:
  #   - name: Configure AWS Credentials
  #     uses: aws-actions/configure-aws-credentials@v2
  #     with:
  #       aws-region: us-east-2
  #       role-to-assume: arn:aws:iam::950481341027:role/github_oidc_iam_role
  #       role-session-name: GithubPostgrestdCiSession

  #   # Launch as many instances as needed. LaunchTemplateId is something known
  #   # ahead of time, and is created elsewhere outside of Github Actions.
  #   - name: Launch runner instance
  #     run: aws ec2 run-instances --launch-template LaunchTemplateId=lt-0a56ee65c272f154e

  test_aarch64:
    name: "aarch64 (cross: x86_64) build & test"
    runs-on: [self-hosted, linux, ARM64, postgrestd_ci, launch_template_id__lt-0a56ee65c272f154e]
    # needs: spin_up_aarch64_instances # Dont run this until 'spin_up_aarch64_instances' has completed

    # strategy:
    #   matrix:
    #     versions: [1,2,3]

    steps:

    - name: Temporary Fake Fail
      run: exit 1

    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'

    - name: Show kernel info
      run: uname -a

    - name: Print env
      run: env

    - name: Install system dependencies
      run: |
        sudo apt-get -y update && sudo apt-get install -y \
          clang-11 \
          llvm-11 \
          clang \
          gcc \
          make \
          build-essential \
          libz-dev \
          zlib1g-dev \
          strace \
          libssl-dev \
          pkg-config \
          crossbuild-essential-amd64

    - name: Install rust
      run: |
        export RUSTUP_HOME="$HOME/.rustup"
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
        source "$HOME/.cargo/env"
        echo "RUSTUP_HOME=$HOME/.rustup" >> $GITHUB_ENV
        echo "PATH=$HOME/.cargo/bin:$PATH" >> $GITHUB_ENV
        cargo --version

    - name: Build postgrestd for both aarch64 and x86_64
      run: ./run install
      env:
        CARGO_TARGET_X86_64_POSTGRES_LINUX_GNU_LINKER: x86_64-linux-gnu-gcc
        CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER: x86_64-linux-gnu-gcc
        CARGO_TARGET_AARCH64_POSTGRES_LINUX_GNU_LINKER: cc

  # test_macos:
  #   name: "macos build & test (experimental)"
  #   runs-on: macos-latest
  #   steps:
  #   - uses: actions/checkout@v3
  #     with:
  #       submodules: 'recursive'

  #   - name: Install rust
  #     run: |
  #       export RUSTUP_HOME="$HOME/.rustup"
  #       curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
  #       source "$HOME/.cargo/env"
  #       rustup toolchain install 1.67.1
  #       cargo --version

  #   - name: Print env
  #     run: env

  #   - name: Build/install both apple targets
  #     run: ./run install
